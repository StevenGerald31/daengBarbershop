<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Daeng Barbershop</title>
    <link href="https://cdn.lineicons.com/4.0/lineicons.css" rel="stylesheet" />
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-KK94CHFLLe+nY2dmCWGMq91rCGa5gtU4mk92HdvYe+M/SXH301p5ILy+dN9+nJOZ"
      crossorigin="anonymous"
    />
    <script
      src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js"
      integrity="sha384-ENjdO4Dr2bkBIFxQpeoTz1HIcje39Wm4jDKdf19U8gI4ddQ3GYNS7NTKfAdVQSZe"
      crossorigin="anonymous"
    ></script>

    <!-- Jquery -->
    <script
      src="https://code.jquery.com/jquery-3.7.1.min.js"
      integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo="
      crossorigin="anonymous"
    ></script>

    <!-- bootstrap icon -->
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css"
      rel="stylesheet"
    />

    <link rel="stylesheet" href="/stylesheets/dashboardServer.css" />
  </head>

  <body>
    <div class="wrapper">
      <aside id="sidebar" class="expand">
        <div class="d-flex justify-content-center">
          <div class="sidebar-logo">
            <img src="/image/logoFIX1.png" />
          </div>
        </div>
        <div class="d-flex justify-content-center">
          <div class="sidebar-judul">
            <h4 class="text-white">Halo, Server</h4>
          </div>
        </div>
        <ul class="sidebar-nav">
          <li class="sidebar-item">
            <a href="#dashboard" class="sidebar-link">
              <h5 class="fw-bold">
                <span>Dashboard</span>
              </h5>
            </a>
          </li>
          <li class="sidebar-item">
            <a href="#data-pelanggan" class="sidebar-link">
              <h5 class="fw-bold">
                <span>Data Pelanggan</span>
              </h5>
            </a>
          </li>
          <li class="sidebar-item">
            <a href="#booking" class="sidebar-link">
              <h5 class="fw-bold">
                <span>Booking</span>
              </h5>
            </a>
          </li>

          <li class="sidebar-item">
            <a href="#daftarProduk" class="sidebar-link">
              <h5 class="fw-bold">
                <span>Produk</span>
              </h5>
            </a>
          </li>
          <li class="sidebar-item">
            <a href="#pembelian-produk" class="sidebar-link">
              <h5 class="fw-bold">
                <span>Pembelian Produk</span>
              </h5>
            </a>
          </li>
        </ul>
        <div class="sidebar-footer">
          <a href="#" class="sidebar-link">
            <i class="lni lni-exit"></i>
            <span>Logout</span>
          </a>
        </div>
      </aside>

      <!-- Main Content Start -->
      <div class="main container-fluid p-3">
        <!-- Dashboard Start -->
        <div id="dashboard">
          <div class="container-fluid">
            <div class="row pt-5">
              <div class="d-flex justify-content-center">
                <h1 class="fw-bold">Daeng Barbershop</h1>
              </div>
            </div>
            <!-- Card -->
            <div class="content-wrap pt-3">
              <div class="content">
                <section
                  class="info-boxes d-flex align-items-center justify-content-center"
                >
                  <div class="info-box">
                    <div class="box-icon">
                      <svg
                        xmlns="http://www.w3.org/2000/svg"
                        width="24"
                        height="24"
                        viewBox="0 0 24 24"
                      >
                        <path
                          d="M21 20V4a1 1 0 0 0-1-1H4a1 1 0 0 0-1 1v16a1 1 0 0 0 1 1h16a1 1 0 0 0 1-1zm-2-1H5V5h14v14z"
                        />
                        <path
                          d="M10.381 12.309l3.172 1.586a1 1 0 0 0 1.305-.38l3-5-1.715-1.029-2.523 4.206-3.172-1.586a1.002 1.002 0 0 0-1.305.38l-3 5 1.715 1.029 2.523-4.206z"
                        />
                      </svg>
                    </div>
                    <div class="box-content">
                      <span class="big text-center" id="jlhPelanggan"> </span>
                      Pelanggan
                    </div>
                  </div>

                  <div class="info-box">
                    <div class="box-icon">
                      <svg
                        xmlns="http://www.w3.org/2000/svg"
                        width="24"
                        height="24"
                        viewBox="0 0 24 24"
                      >
                        <path
                          d="M3,21c0,0.553,0.448,1,1,1h16c0.553,0,1-0.447,1-1v-1c0-3.714-2.261-6.907-5.478-8.281C16.729,10.709,17.5,9.193,17.5,7.5 C17.5,4.468,15.032,2,12,2C8.967,2,6.5,4.468,6.5,7.5c0,1.693,0.771,3.209,1.978,4.219C5.261,13.093,3,16.287,3,20V21z M8.5,7.5 C8.5,5.57,10.07,4,12,4s3.5,1.57,3.5,3.5S13.93,11,12,11S8.5,9.43,8.5,7.5z M12,13c3.859,0,7,3.141,7,7H5C5,16.141,8.14,13,12,13z"
                        />
                      </svg>
                    </div>
                    <div class="box-content">
                      <span class="big text-center" id="jlhVoucher"> </span>
                      Voucher
                    </div>
                  </div>
                </section>
              </div>
            </div>
          </div>
        </div>
        <!-- Dashboard End -->

        <!-- DAta Pelanggan Start -->
        <div id="data-pelanggan">
          <div class="row pt-3">
            <div class="d-flex justify-content-center">
              <h1 class="fw-bold">Data Pelanggan</h1>
            </div>
          </div>
          <div class="row m-3 table-pelanggan">
            <table class="table">
              <thead>
                <tr>
                  <th scope="col">Nama</th>
                  <th scope="col">No Telp</th>
                  <th scope="col">Jenis Kelamin</th>
                  <th scope="col">Alamat</th>
                  <th scope="col">Point</th>
                  <th scope="col">Action</th>
                </tr>
              </thead>
              <tbody>
                <!-- Rows of data will go here -->
              </tbody>
            </table>
          </div>

          <!-- modal ganti password  -->
          <div
            class="modal fade"
            id="resetPassword"
            tabindex="-1"
            aria-labelledby="resetPasswordLabel"
            aria-hidden="true"
          >
            <div class="modal-dialog">
              <div class="modal-content">
                <div class="modal-header">
                  <h1 class="modal-title fs-5" id="resetPasswordLabel">
                    Reset Password
                  </h1>
                  <button
                    type="button"
                    class="btn-close"
                    data-bs-dismiss="modal"
                    aria-label="Close"
                  ></button>
                </div>
                <div class="modal-body">
                  <form id="resetPasswordForm">
                    <div class="mb-3">
                      <label for="password" class="form-label"
                        >Password Baru</label
                      >
                      <input
                        type="text"
                        class="form-control"
                        id="password"
                        name="password"
                        required
                      />
                    </div>
                  </form>
                </div>
                <div class="modal-footer">
                  <button
                    type="button"
                    class="btn btn-secondary"
                    data-bs-dismiss="modal"
                  >
                    Close
                  </button>
                  <button
                    type="button"
                    class="btn btn-primary"
                    id="saveNewPassButton"
                  >
                    Save changes
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
        <!-- DAta Pelanggan End -->

        <!-- Booking Section Start -->
        <div id="booking">
          <div class="row judul pt-4">
            <div class="d-flex justify-content-start">
              <h3 class="fw-bold">Daftar Booking</h3>
            </div>
          </div>
          <div class="request-container"></div>
          <div class="row judul pt-4">
            <div class="d-flex justify-content-start">
              <h3 class="fw-bold">Daftar Reserved</h3>
            </div>
          </div>
          <div class="reserved-container"></div>
        </div>
        <!-- Booking Section End -->

        <!-- Daftar Stok Produk Start -->
        <div id="daftarProduk">
          <!-- Judul Start -->
          <div class="row judul-produk m-3">
            <div class="d-flex justify-content-center">
              <h2 class="fw-bold">Daftar Stok Produk</h2>
            </div>
          </div>
          <!-- Judul End -->

          <!-- Form Cari Start -->
          <div class="row pencarian m-2 justify-content-center m-3">
            <div class="col-4">
              <form class="d-flex">
                <input
                  class="form-control me-2"
                  type="search"
                  placeholder="Cari Produk"
                  aria-label="Cari"
                />
                <button class="btn btn-outline-success" type="submit">
                  Cari
                </button>
              </form>
            </div>
            <button
              class="btn btn-success"
              type="submit"
              style="max-width: 100px"
              data-bs-toggle="modal"
              data-bs-target="#exampleModal"
            >
              Tambah Jenis
            </button>
          </div>

          <!-- Modal Update Produk -->
          <div
            class="modal fade"
            id="updateProdukModal"
            tabindex="-1"
            aria-labelledby="updateProdukModalLabel"
            aria-hidden="true"
          >
            <div class="modal-dialog">
              <div class="modal-content">
                <div class="modal-header">
                  <h1 class="modal-title fs-5" id="updateProdukModalLabel">
                    Update Produk
                  </h1>
                  <button
                    type="button"
                    class="btn-close"
                    data-bs-dismiss="modal"
                    aria-label="Close"
                  ></button>
                </div>
                <div class="modal-body">
                  <form id="updateProdukForm">
                    <div class="mb-3">
                      <label for="namaProduk" class="form-label">Nama</label>
                      <input
                        type="text"
                        class="form-control"
                        id="namaProduk"
                        name="nama"
                        required
                      />
                    </div>
                    <div class="mb-3">
                      <label for="deskripsiProduk" class="form-label"
                        >Deskripsi</label
                      >
                      <textarea
                        class="form-control"
                        id="deskripsiProduk"
                        name="deskripsi"
                        rows="3"
                        required
                      ></textarea>
                    </div>
                    <div class="mb-3">
                      <label for="hargaProduk" class="form-label">Harga</label>
                      <input
                        type="number"
                        class="form-control"
                        id="hargaProduk"
                        name="harga"
                        required
                      />
                    </div>
                    <div class="mb-3">
                      <label for="jenisProduk" class="form-label"
                        >Jenis Produk</label
                      >
                      <input
                        type="text"
                        class="form-control"
                        id="jenisProduk"
                        name="jenisproduk"
                        required
                      />
                    </div>
                    <div class="mb-3">
                      <label for="gambarProduk" class="form-label"
                        >Gambar (Opsional)</label
                      >
                      <input
                        type="text"
                        class="form-control"
                        id="gambarProduk"
                        name="gambar"
                      />
                    </div>
                  </form>
                </div>
                <div class="modal-footer">
                  <button
                    type="button"
                    class="btn btn-secondary"
                    data-bs-dismiss="modal"
                  >
                    Close
                  </button>
                  <button
                    type="button"
                    class="btn btn-primary"
                    id="saveProdukButton"
                  >
                    Save changes
                  </button>
                </div>
              </div>
            </div>
          </div>

          <!-- Modal Tambah Jenis-->
          <div
            class="modal fade"
            id="exampleModal"
            tabindex="-1"
            aria-labelledby="exampleModalLabel"
            aria-hidden="true"
          >
            <div class="modal-dialog">
              <div class="modal-content">
                <div class="modal-header">
                  <h1 class="modal-title fs-5" id="exampleModalLabel">
                    Tambah Jenis Produk
                  </h1>
                  <button
                    type="button"
                    class="btn-close"
                    data-bs-dismiss="modal"
                    aria-label="Close"
                  ></button>
                </div>
                <div class="modal-body">
                  <form id="tambahJenisProdukForm">
                    <div class="mb-3">
                      <label for="jenisproduk" class="form-label"
                        >Jenis Produk</label
                      >
                      <input
                        type="text"
                        class="form-control"
                        id="jenisproduk"
                        name="jenisproduk"
                        required
                      />
                    </div>
                    <div class="mb-3">
                      <label for="nama" class="form-label">Nama</label>
                      <input
                        type="text"
                        class="form-control"
                        id="nama"
                        name="nama"
                        required
                      />
                    </div>
                    <div class="mb-3">
                      <label for="deskripsi" class="form-label"
                        >Deskripsi</label
                      >
                      <textarea
                        class="form-control"
                        id="deskripsi"
                        name="deskripsi"
                        rows="3"
                        required
                      ></textarea>
                    </div>
                    <div class="mb-3">
                      <label for="harga" class="form-label">Harga</label>
                      <input
                        type="number"
                        class="form-control"
                        id="harga"
                        name="harga"
                        required
                      />
                    </div>
                    <!-- <div class="mb-3">
                      <label for="gambar" class="form-label">Gambar</label>
                      <input
                        type="file"
                        class="form-control"
                        id="gambar"
                        name="gambar"
                        accept="image/*"
                        required
                      />
                    </div> -->
                    <div class="mb-3">
                      <label for="stok" class="form-label">Jumlah Stok</label>
                      <input
                        type="number"
                        class="form-control"
                        id="stok"
                        name="stok"
                        required
                      />
                    </div>
                  </form>
                </div>
                <div class="modal-footer">
                  <button
                    type="button"
                    class="btn btn-secondary"
                    data-bs-dismiss="modal"
                  >
                    Close
                  </button>
                  <button
                    type="button"
                    class="btn btn-primary"
                    id="saveChangesButton"
                  >
                    Save changes
                  </button>
                </div>
              </div>
            </div>
          </div>

          <!-- Form Cari End -->

          <!-- <div class="row daftar-produk m-2 d-flex justify-content-around">
            <div class="row card-snack">
              <div class="judul d-flex justify-content-center">
                <h3 class="fw-bold">Snack</h3>
              </div>

              <div class="card col-3 m-2">
                <div
                  class="card-img d-flex justify-content-center align-items-center m-1"
                >
                  <img
                    src="/image/minyak-rambut.png"
                    class="card-img-top"
                    alt="Nama Produk"
                  />
                </div>
                <div class="card-body">
                  <h6 class="card-title text-center fw-bold">Nama Produk</h6>
                  <p class="card-text text-center">Rp50.000</p>
                  <div class="d-flex justify-content-center">
                    <button type="button" class="btn btn-success m-1">
                      <i class="bi bi-pencil"></i>
                    </button>
                    <button type="button" class="btn btn-danger m-1">
                      <i class="bi bi-trash3"></i>
                    </button>
                  </div>
                </div>
              </div>
              <div class="card col-3 m-2">
                <div
                  class="card-img d-flex justify-content-center align-items-center m-1"
                >
                  <img
                    src="/image/minyak-rambut.png"
                    class="card-img-top"
                    alt="Nama Produk"
                  />
                </div>
                <div class="card-body">
                  <h6 class="card-title text-center fw-bold">Nama Produk</h6>
                  <p class="card-text text-center">Rp50.000</p>
                  <div class="d-flex justify-content-center">
                    <button type="button" class="btn btn-success m-1">
                      <i class="bi bi-pencil"></i>
                    </button>
                    <button type="button" class="btn btn-danger m-1">
                      <i class="bi bi-trash3"></i>
                    </button>
                  </div>
                </div>
              </div>
            </div>
            <div class="row card-barang">
              <div class="judul d-flex justify-content-center">
                <h3 class="fw-bold">Barang</h3>
              </div>
              <div class="col-3 mt-3">
                <div class="card">
                  <div
                    class="card-img d-flex justify-content-center align-items-center m-1"
                  >
                    <img
                      src="/image/minyak-rambut.png"
                      class="card-img-top"
                      alt="Nama Produk"
                    />
                  </div>
                  <div class="card-body">
                    <h6 class="card-title text-center fw-bold">Nama Produk</h6>
                    <p class="card-text text-center">Rp50.000</p>
                    <div class="d-flex justify-content-center">
                      <button type="button" class="btn btn-success m-1">
                        <i class="bi bi-pencil"></i>
                      </button>
                      <button type="button" class="btn btn-danger m-1">
                        <i class="bi bi-trash3"></i>
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div> -->

          <div class="container" style="padding: 20px">
            <div class="row daftar-produk m-2 d-flex justify-content-around">
              <div class="judul d-flex justify-content-center">
                <h3 class="fw-bold">All Produk</h3>
              </div>
              <div
                class="card-produk-container d-flex flex-wrap justify-content-around"
                style="
                  display: flex;
                  flex-wrap: wrap;
                  justify-content: space-around;
                "
              ></div>
            </div>
            <div
              class="modal fade"
              id="updateStockModal"
              tabindex="-1"
              aria-labelledby="updateStockModalLabel"
              aria-hidden="true"
            >
              <div class="modal-dialog">
                <div class="modal-content">
                  <div class="modal-header">
                    <h1 class="modal-title fs-5" id="updateStockModalLabel">
                      Update Stok Produk
                    </h1>
                    <button
                      type="button"
                      class="btn-close"
                      data-bs-dismiss="modal"
                      aria-label="Close"
                    ></button>
                  </div>
                  <div class="modal-body">
                    <form id="updateStockForm">
                      <div class="mb-3">
                        <label for="stock" class="form-label"
                          >Jumlah Stok Baru</label
                        >
                        <input
                          type="number"
                          class="form-control"
                          id="stock"
                          name="stock"
                          required
                        />
                      </div>
                    </form>
                  </div>
                  <div class="modal-footer">
                    <button
                      type="button"
                      class="btn btn-secondary"
                      data-bs-dismiss="modal"
                    >
                      Close
                    </button>
                    <button
                      type="button"
                      class="btn btn-primary"
                      id="saveStockButton"
                    >
                      Save changes
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <!-- DAftar Stok Produk End -->
        </div>

        <!-- Pembelian Produk Start -->
        <div id="pembelian-produk">
          <div class="row">
            <!-- daftar produk -->
            <div class="col-8">
              <!-- Form Cari Start -->
              <div class="row pencarian m-2 justify-content-center m-3">
                <div class="col-4">
                  <form class="d-flex">
                    <input
                      class="form-control me-2"
                      type="search"
                      placeholder="Cari Produk"
                      aria-label="Cari"
                    />
                    <button class="btn btn-outline-success" type="submit">
                      Cari
                    </button>
                  </form>
                </div>
              </div>
              <!-- Form Cari End -->
              <div class="container" style="padding: 20px">
                <div
                  class="row daftar-produk m-2 d-flex justify-content-around"
                >
                  <div class="judul d-flex justify-content-center">
                    <h3 class="fw-bold">All Produk</h3>
                  </div>
                  <div
                    class="card-produk-pembelian d-flex flex-wrap justify-content-around"
                    style="
                      display: flex;
                      flex-wrap: wrap;
                      justify-content: space-around;
                    "
                  ></div>
                </div>
              </div>
            </div>
            <!-- Daftar Produk End -->

            <!-- Daftar Pesanan Start -->
            <div class="col-4 daftar-pembelian">
              <div class="row judul m-2">
                <h4
                  class="fw-bold text-center text-white"
                  style="border-bottom: 3px solid #000"
                >
                  Daftar Pembelian
                </h4>
              </div>
              <div class="container-item-pembelian"></div>
            </div>
            <!-- Daftar Pesanan End -->
          </div>

          <!-- modal metode pembayaran -->
          <div
            class="modal fade"
            id="metodePembayaran"
            tabindex="-1"
            aria-labelledby="metodePembayaranLabel"
            aria-hidden="true"
          >
            <div class="modal-dialog">
              <div class="modal-content">
                <div class="modal-header">
                  <h1 class="modal-title fs-5" id="metodePembayaranLabel">
                    Metode Pembayaran
                  </h1>
                  <button
                    type="button"
                    class="btn-close"
                    data-bs-dismiss="modal"
                    aria-label="Close"
                  ></button>
                </div>
                <div class="modal-body">
                  <form id="metodePembayaranForm">
                    <div class="mb-3">
                      <label for="metode_pembayaran" class="form-label"
                        >Metode Pembayaran</label
                      >
                      <select
                        class="form-control"
                        id="metode_pembayaran"
                        name="metode_pembayaran"
                        required
                      >
                        <option value="">Pilih Metode Pembayaran</option>
                        <option value="Qrish">Qris</option>
                        <option value="Cash">Cash</option>
                        <option value="Transfer">Transfer</option>
                        <option value="Point">Point</option>
                      </select>
                    </div>
                    <div class="mb-3">
                      <label for="no_telp" class="form-label">Nomor HP</label>
                      <input
                        type="text"
                        class="form-control"
                        id="no_telp"
                        name="no_telp"
                        required
                      />
                    </div>
                  </form>
                </div>
                <div class="modal-footer">
                  <button
                    type="button"
                    class="btn btn-secondary"
                    data-bs-dismiss="modal"
                  >
                    Close
                  </button>
                  <button
                    type="button"
                    class="btn btn-success"
                    id="finishTransaction"
                  >
                    Transaksi Selesai
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <script>
      // Dapatkan semua link sidebar
      const sidebarLinks = document.querySelectorAll(".sidebar-link");

      // Dapatkan semua konten tab
      const tabs = document.querySelectorAll(".main > div");

      sidebarLinks.forEach((link) => {
        link.addEventListener("click", function (e) {
          e.preventDefault();

          // Sembunyikan semua tab
          tabs.forEach((tab) => {
            tab.style.display = "none";
          });

          // Tampilkan tab yang sesuai
          const targetTab = document.querySelector(this.getAttribute("href"));
          if (targetTab) {
            if (targetTab.getAttribute("id") === "pembelian-produk") {
              console.log(targetTab.getAttribute("id"));
              fetch("http://localhost:3000/web/allDataProduk", {
                method: "GET",
              })
                .then((response) => response.json())
                .then((data) => {
                  console.log("produk: ", data);

                  const daftarProduk = document.querySelector(
                    ".card-produk-pembelian"
                  );
                  daftarProduk.innerHTML = ""; // clear existing cards

                  // buat card untuk produk snack
                  data.forEach((item) => {
                    const harga = item.harga;
                    const formattedHarga = `Rp${harga.toLocaleString("id-ID")}`;
                    const card = document.createElement("div");
                    card.className = "card col-3 m-2";
                    card.innerHTML = `
                              <div class="card-img d-flex justify-content-center align-items-center m-1">
                                <img
                                  src="/image/minyak-rambut.png"
                                  class="card-img-top"
                                  alt="${item.nama_produk}"
                                />
                              </div>
                              <div class="card-body">
                                <h6 class="card-title text-center fw-bold">${item.nama_produk}</h6>
                                <p class="card-text text-center">${formattedHarga}</p>
                                <p class="card-text text-center">Stok: ${item.stok}</p>
                                <div class="d-flex justify-content-center">
                                  <button type="button" class="btn btn-success m-1 add-to-cart" data-id="${item.id_produk}" data-nama="${item.nama_produk}" data-harga="${formattedHarga}">
                                    <i class="bi bi-plus-lg"></i>
                                  </button>
                                </div>
                              </div>
                            `;

                    daftarProduk.append(card);
                  });
                  // Event listener untuk tombol tambah ke keranjang
                  document
                    .querySelectorAll(".add-to-cart")
                    .forEach((button) => {
                      button.addEventListener("click", (event) => {
                        const button = event.currentTarget;
                        const id = button.getAttribute("data-id");
                        const nama = button.getAttribute("data-nama");
                        const harga = button.getAttribute("data-harga");

                        addToCart(id, nama, harga);
                      });
                    });
                });
              //         // Tambahkan card rekap di bawah semua item
              //         const container = document.querySelector(
              //           ".container-item-pembelian"
              //         );
              //         const recapCard = document.createElement("div");
              //         recapCard.className = "card mt-4";
              //         recapCard.innerHTML = `
              //   <div class="card-body">
              //     <h5 class="card-title">Rekap Total</h5>
              //     <p class="card-text">Total Item: <span id="total-items">0</span></p>
              //     <p class="card-text">Total Harga: <span id="total-price">Rp0</span></p>
              //     <button type="button" class="btn btn-success d-flex align-items-center" id="checkout-btn">
              //       <i class="bi bi-check-lg me-2"></i> Checkout
              //     </button>
              //   </div>
              // `;
              //         container.append(recapCard);

              //         function addToCart(id, nama, harga) {
              //           // Periksa apakah produk sudah ada di keranjang
              //           let item = container.querySelector(`.item[data-id="${id}"]`);

              //           if (item) {
              //             // Update jumlah jika produk sudah ada
              //             const quantity = item.querySelector(".quantity");
              //             quantity.textContent = parseInt(quantity.textContent) + 1;
              //             updateTotalPrice(item);
              //           } else {
              //             // Buat elemen baru untuk produk
              //             const newItem = document.createElement("div");
              //             newItem.className = "row mt-2 item";
              //             newItem.setAttribute("data-id", id);
              //             newItem.setAttribute("data-harga", harga); // Simpan harga satuan
              //             newItem.innerHTML = `
              //       <div class="col-12">
              //         <div class="card">
              //           <div class="row g-0">
              //             <div class="col-md-5">
              //               <div class="card-body">
              //                 <p class="card-title" style="font-size: 1em">${nama}</p>
              //                 <p class="card-text" style="font-size: 0.8em">Harga: ${harga}</p>
              //                 <p class="card-text" style="font-size: 0.8em">Total: <span class="total-price">${harga}</span></p>
              //               </div>
              //             </div>
              //             <div class="col-md-6 d-flex align-items-center justify-content-center">
              //               <button class="btn btn-outline-secondary decrease">-</button>
              //               <span class="mx-3 quantity">1</span>
              //               <button class="btn btn-outline-secondary increase">+</button>
              //               <button class="btn btn-danger btn-sm ms-3 remove">hapus</button>
              //             </div>
              //           </div>
              //         </div>
              //       </div>
              //     `;

              //             container.append(newItem);

              //             // Tambahkan event listener untuk tombol decrease, increase, dan remove
              //             newItem
              //               .querySelector(".decrease")
              //               .addEventListener("click", () => {
              //                 const quantity = newItem.querySelector(".quantity");
              //                 let qty = parseInt(quantity.textContent);
              //                 if (qty > 1) {
              //                   quantity.textContent = qty - 1;
              //                   updateTotalPrice(newItem);
              //                 }
              //               });

              //             newItem
              //               .querySelector(".increase")
              //               .addEventListener("click", () => {
              //                 const quantity = newItem.querySelector(".quantity");
              //                 quantity.textContent = parseInt(quantity.textContent) + 1;
              //                 updateTotalPrice(newItem);
              //               });

              //             newItem
              //               .querySelector(".remove")
              //               .addEventListener("click", () => {
              //                 newItem.remove();
              //                 updateRecap(); // Update recap setelah item dihapus
              //               });
              //           }

              //           updateRecap(); // Update recap setelah item ditambahkan
              //         }

              //         function updateTotalPrice(item) {
              //           const quantity = item.querySelector(".quantity").textContent;
              //           const harga = parseInt(
              //             item.getAttribute("data-harga").replace(/[^\d]/g, "")
              //           );
              //           const totalPrice = quantity * harga;
              //           item.querySelector(
              //             ".total-price"
              //           ).textContent = `Rp${totalPrice.toLocaleString("id-ID")}`;
              //         }

              //         function updateRecap() {
              //           const items = container.querySelectorAll(".item");
              //           let totalItems = 0;
              //           let totalPrice = 0;

              //           items.forEach((item) => {
              //             const quantity = parseInt(
              //               item.querySelector(".quantity").textContent
              //             );
              //             const harga = parseInt(
              //               item.getAttribute("data-harga").replace(/[^\d]/g, "")
              //             );
              //             totalItems += quantity;
              //             totalPrice += quantity * harga;
              //           });

              //           document.getElementById("total-items").textContent = totalItems;
              //           document.getElementById(
              //             "total-price"
              //           ).textContent = `Rp${totalPrice.toLocaleString("id-ID")}`;
              //         }
            }
            targetTab.style.display = "block";
          }
        });
      });

      window.onload = function () {
        // Sembunyikan semua tab
        tabs.forEach((tab) => {
          tab.style.display = "none";
        });

        // Tampilkan tab profile
        const profileTab = document.querySelector("#dashboard");
        if (profileTab) {
          profileTab.style.display = "block";
        }
      };

      // ---------------script kebutuhan data--------------------
      let selectedUserId = null;
      // Data Pelanggan
      fetch("http://localhost:3000/web/pelanggan/:lokasi", {
        method: "GET",
      })
        .then((response) => response.json())
        .then((data) => {
          console.log("Data Pelanggan: ", data);

          const tableBody = document.querySelector(".table-pelanggan tbody");
          tableBody.innerHTML = ""; // clear existing rows

          data.forEach((item) => {
            point = item.point;
            if (point == null) {
              point = 0;
            }

            const row = `
        <tr>
          <td>${item.name}</td>
          <td>${item.no_telp}</td>
          <td>${item.jenis_kelamin}</td>
          <td>${item.alamat}</td>
          <td>${point}</td>
          <td>
            <button type="button" class="btn btn-success m-1" data-bs-toggle="modal" data-bs-target="#resetPassword" data-id-user="${item.id_user}">
              <i class="bi bi-pencil"></i>
            </button>
          </td>
        </tr>
      `;

            tableBody.innerHTML += row;
          });

          // Attach event listener using delegation
          tableBody.addEventListener("click", (event) => {
            const button = event.target.closest("button.btn-success");
            if (button) {
              selectedUserId = button.getAttribute("data-id-user");
              console.log("ID Pengguna yang dipilih: ", selectedUserId); // Debugging
            }
          });
        });

      // Data Booking
      fetch("http://localhost:3000/web/request/:lokasi", {
        method: "GET",
      })
        .then((response) => response.json())
        .then((data) => {
          // Ambil elemen tempat untuk meletakkan kartu booking
          const requestContainer = document.querySelector(".request-container");
          if (data.length >= 1) {
            console.log("Data Request: ", data);

            // Iterasi melalui setiap data booking
            data.forEach((request) => {
              // Buat elemen div untuk row daftar-request
              const requestDiv = document.createElement("div");
              requestDiv.classList.add("row", "daftar-request", "mt-2");

              // Buat kolom pertama (Id Pelanggan dan Nama)
              const col1 = document.createElement("div");
              col1.classList.add("col-md-4");
              const info1 = document.createElement("div");
              info1.classList.add("info");
              const idBooking = document.createElement("div");
              idBooking.textContent = `Id Booking: ${request.id_booking}`;
              const namaPelanggan = document.createElement("div");
              namaPelanggan.textContent = request.nama_pelanggan;
              info1.appendChild(idBooking);
              info1.appendChild(namaPelanggan);
              col1.appendChild(info1);

              // Buat kolom kedua (Waktu)
              const col2 = document.createElement("div");
              col2.classList.add("col-md-4");
              const info2 = document.createElement("div");
              info2.classList.add("info");
              const waktuLabel = document.createElement("div");
              waktuLabel.textContent = "Waktu:";
              const tanggal = document.createElement("div");
              tanggal.textContent = request.tanggal;
              const jam = document.createElement("div");
              jam.textContent = request.tanggal_booking;
              info2.appendChild(waktuLabel);
              info2.appendChild(tanggal);
              info2.appendChild(jam);
              col2.appendChild(info2);

              // Buat kolom ketiga (Tombol Confirm dan Cancel)
              const col3 = document.createElement("div");
              col3.classList.add(
                "col-md-4",
                "d-flex",
                "justify-content-center"
              );
              const buttonsDiv = document.createElement("div");
              buttonsDiv.classList.add("buttons");
              const confirmButton = document.createElement("button");
              confirmButton.classList.add("button", "confirm");
              confirmButton.textContent = "Confirm";
              const cancelButton = document.createElement("button");
              cancelButton.classList.add("button", "cancel");
              cancelButton.textContent = "Cancel";
              buttonsDiv.appendChild(confirmButton);
              buttonsDiv.appendChild(cancelButton);
              col3.appendChild(buttonsDiv);

              // Add event listener for confirm button
              confirmButton.addEventListener("click", () =>
                confirmRequest(request.id_booking)
              );
              cancelButton.addEventListener("click", () =>
                cancelBooking(request.id_booking)
              );

              // Masukkan kolom-kolom ke dalam row daftar-request
              requestDiv.appendChild(col1);
              requestDiv.appendChild(col2);
              requestDiv.appendChild(col3);

              // Masukkan row daftar-request ke dalam container request
              requestContainer.appendChild(requestDiv);
            });
          } else {
            const noDataText = document.createElement("h4");
            noDataText.textContent = "Data request booking belum tersedia";
            requestContainer.appendChild(noDataText);
          }
        });

      // Data Reserved
      fetch("http://localhost:3000/web/reserved/:lokasi", {
        method: "GET",
      })
        .then((response) => response.json())
        .then((data) => {
          console.log("data: ", data.length);
          // Ambil elemen tempat meletakkan kartu reserved
          const reservedContainer = document.querySelector(
            ".reserved-container"
          );

          if (data.length >= 1) {
            console.log("Data Reserved: ", data);

            // Iterasi melalui setiap data reserved
            data.forEach((reserved) => {
              // Buat elemen div untuk row daftar-reserved
              const reservedDiv = document.createElement("div");
              reservedDiv.classList.add("row", "daftar-reserved", "mt-2");

              // Buat kolom pertama (Id Pelanggan dan Nama)
              const col1 = document.createElement("div");
              col1.classList.add("col-md-4");
              const info1 = document.createElement("div");
              info1.classList.add("info");
              const idBooking = document.createElement("div");
              idBooking.textContent = `Id Pelanggan: ${reserved.id_booking}`;
              const namaPelanggan = document.createElement("div");
              namaPelanggan.textContent = reserved.nama_pelanggan;
              info1.appendChild(idBooking);
              info1.appendChild(namaPelanggan);
              col1.appendChild(info1);

              // Buat kolom kedua (Waktu)
              const col2 = document.createElement("div");
              col2.classList.add("col-md-4");
              const info2 = document.createElement("div");
              info2.classList.add("info");
              const waktuLabel = document.createElement("div");
              waktuLabel.textContent = "Waktu:";
              const tanggal = document.createElement("div");
              tanggal.textContent = reserved.tanggal;
              const jam = document.createElement("div");
              jam.textContent = reserved.tanggal_booking;
              info2.appendChild(waktuLabel);
              info2.appendChild(tanggal);
              info2.appendChild(jam);
              col2.appendChild(info2);

              // Buat kolom ketiga (Tombol Confirm dan Cancel)
              const col3 = document.createElement("div");
              col3.classList.add(
                "col-md-4",
                "d-flex",
                "justify-content-center"
              );
              const buttonsDiv = document.createElement("div");
              buttonsDiv.classList.add("buttons");
              const confirmButton = document.createElement("button");
              confirmButton.classList.add("button", "confirm");
              confirmButton.textContent = "Selesai";

              buttonsDiv.appendChild(confirmButton);
              col3.appendChild(buttonsDiv);

              // Add event listener for confirm button
              confirmButton.addEventListener("click", () =>
                finishBooking(reserved.id_booking)
              );

              // Masukkan kolom-kolom ke dalam row daftar-reserved
              reservedDiv.appendChild(col1);
              reservedDiv.appendChild(col2);
              reservedDiv.appendChild(col3);

              // Masukkan row daftar-reserved ke dalam container reserved
              reservedContainer.appendChild(reservedDiv);
            });
          } else {
            const noDataText = document.createElement("h4");
            noDataText.textContent = "Data reserved booking belum tersedia";
            reservedContainer.appendChild(noDataText);
          }
        });

      // Function to confirm booking
      const finishBooking = (bookingId) => {
        // Log the bookingId to the console
        console.log("Confirming booking with ID:", bookingId);

        fetch(`http://localhost:3000/web/booking/finish/${bookingId}`, {
          method: "PUT",
        })
          .then((response) => {
            if (!response.ok) {
              throw new Error("Network response was not ok");
            }
            return response.json();
          })
          .then((data) => {
            if (data.message) {
              alert(data.message);
            }
            if (data.finish) {
              console.log("Booking Confirmed: ", data.finish);
              // Optionally update the UI to reflect the booking confirmation

              // Reload the page after confirming booking
              window.location.reload();
            }
          })
          .catch((error) => {
            console.error("Error confirming booking: ", error);
            alert("An error occurred while confirming the booking");
          });
      };

      // Function to confirm booking
      const confirmRequest = (bookingId) => {
        // Log the bookingId to the console
        console.log("Confirming booking with ID:", bookingId);

        fetch(`http://localhost:3000/web/booking/confirm/${bookingId}`, {
          method: "PUT",
        })
          .then((response) => {
            if (!response.ok) {
              throw new Error("Network response was not ok");
            }
            return response.json();
          })
          .then((data) => {
            if (data.message) {
              alert(data.message);
            }
            if (data.booking) {
              console.log("Booking Confirmed: ", data.booking);
              // Optionally update the UI to reflect the booking confirmation

              // Reload the page after confirming booking
              window.location.reload();
            }
          })
          .catch((error) => {
            console.error("Error confirming booking: ", error);
            alert("An error occurred while confirming the booking");
          });
      };

      // Function to confirm booking
      const cancelBooking = (bookingId) => {
        // Log the bookingId to the console
        console.log("Confirming booking with ID:", bookingId);

        fetch(`http://localhost:3000/web/booking/cancel/${bookingId}`, {
          method: "PUT",
        })
          .then((response) => {
            if (!response.ok) {
              throw new Error("Network response was not ok");
            }
            return response.json();
          })
          .then((data) => {
            if (data.message) {
              alert(data.message);
            }
            if (data.cancel) {
              console.log("cancel Confirmed: ", data.cancel);
              // Optionally update the UI to reflect the booking confirmation

              // Reload the page after confirming booking
              window.location.reload();
            }
          })
          .catch((error) => {
            console.error("Error confirming booking: ", error);
            alert("An error occurred while confirming the booking");
          });
      };

      // daftar stok produk
      function loadProduk() {
        fetch("http://localhost:3000/web/allDataProduk", {
          method: "GET",
        })
          .then((response) => response.json())
          .then((data) => {
            console.log("produk: ", data);

            const daftarProduk = document.querySelector(
              ".card-produk-container"
            );
            daftarProduk.innerHTML = ""; // clear existing cards

            // buat card untuk produk snack
            data.forEach((item) => {
              const harga = item.harga;
              const formattedHarga = `Rp${harga.toLocaleString("id-ID")}`;
              const card = document.createElement("div");
              card.className = "card col-3 m-2";
              card.innerHTML = `
            <div
                    class="card-img d-flex justify-content-center align-items-center m-1"
                  >
                    <img
                      src="/image/minyak-rambut.png"
                      class="card-img-top"
                      alt="Nama Produk"
                    />
                  </div>
                  <div class="card-body">
                    <h6 class="card-title text-center fw-bold">${item.nama_produk}</h6>
                    <p class="card-text text-center">${formattedHarga}</p>
                    <p class="card-text text-center">Stok: ${item.stok}</p>
                    <div class="d-flex justify-content-center">
                      <button type="button" class=" update-stok btn btn-success m-1" data-bs-toggle="modal" data-bs-target="#updateStockModal" data-id="${item.id_stockproduk}">
                        <i class="bi bi-pencil"></i>
                      </button>
                      <button type="button" class="update-produk btn btn-primary m-1" data-bs-toggle="modal" data-bs-target="#updateProdukModal" data-id="${item.id_produk}">Update</button>
                      <button type="button" class="hapus-produk btn btn-danger m-1" data-id="${item.id_produk}">Hapus</button>
                    </div>
                  </div>
            `;

              daftarProduk.append(card);
            });
          });
      }

      // Initial load
      loadProduk();

      // script tambah jenis produk
      document
        .getElementById("saveChangesButton")
        .addEventListener("click", () => {
          const form = document.getElementById("tambahJenisProdukForm");
          const formData = new FormData(form);
          const data = Object.fromEntries(formData.entries());

          fetch("http://localhost:3000/web/newJenisProduk", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify(data),
          })
            .then((response) => {
              if (!response.ok) {
                return response.json().then((error) => {
                  throw error;
                });
              }
              return response.json();
            })
            .then((result) => {
              console.log("Success:", result);
              // Handle the successful response here
              alert("Data berhasil ditambahkan");

              // Menutup modal setelah sukses
              const modalElement = document.getElementById("exampleModal");
              const modalInstance = bootstrap.Modal.getInstance(modalElement);
              modalInstance.hide();

              // Initial load
              loadProduk();
            })
            .catch((error) => {
              console.error("Error:", error);
              // Handle the error response here
            });
        });

      document.addEventListener("DOMContentLoaded", () => {
        // Ambil modal dan form elemen
        const updateStockModal = document.getElementById("updateStockModal");
        const saveStockButton = document.getElementById("saveStockButton");

        // Variabel untuk menyimpan ID produk yang akan diupdate
        let selectedStockProductId = null;

        // Event delegation untuk menangani tombol edit (pencil)
        document.addEventListener("click", (event) => {
          const button = event.target.closest(".update-stok");
          if (button) {
            selectedStockProductId = button.getAttribute("data-id");
            console.log("ID Produk yang dipilih: ", selectedStockProductId); // Debugging
          }
        });

        // Event listener untuk tombol simpan stok
        saveStockButton.addEventListener("click", async () => {
          const stockInput = document.getElementById("stock");
          const newStock = stockInput.value;

          console.log("Nilai stok baru: ", newStock); // Debugging
          console.log("Nilai Id: ", selectedStockProductId); // Debugging

          if (!selectedStockProductId || !newStock) {
            alert("Please select a product and enter a new stock quantity.");
            return;
          }

          try {
            const response = await fetch(
              "http://localhost:3000/web/updateStok",
              {
                method: "PUT",
                headers: {
                  "Content-Type": "application/json",
                },
                body: JSON.stringify({
                  stok: newStock,
                  id_stockproduk: selectedStockProductId,
                }),
              }
            );

            if (!response.ok) {
              const error = await response.json();
              throw new Error(error.message);
            }

            const result = await response.json();
            console.log("Stock updated:", result);
            alert("Stock updated successfully");

            // Tutup modal
            const modalInstance = bootstrap.Modal.getInstance(updateStockModal);
            modalInstance.hide();

            // Refresh data produk
            loadProduk(); // Pastikan loadProduk adalah fungsi yang memuat ulang daftar produk
          } catch (error) {
            console.log("Error updating stock:", error.message);
            alert("Failed to update stock");
          }
        });
      });

      document.addEventListener("DOMContentLoaded", () => {
        let selectedProductId = null;

        // Event delegation untuk tombol update produk
        document.addEventListener("click", (event) => {
          const button = event.target.closest(".update-produk");
          if (button) {
            selectedProductId = button.getAttribute("data-id");
            const productCard = button.closest(".card-body");
            document.getElementById("namaProduk").value =
              productCard.querySelector(".card-title").textContent;
            document.getElementById("hargaProduk").value = productCard
              .querySelector(".card-text:nth-of-type(1)")
              .textContent.replace("Rp", "")
              .replace(",", "")
              .trim();
            document.getElementById("deskripsiProduk").value = ""; // Assuming the description will be fetched separately
            document.getElementById("jenisProduk").value = ""; // Assuming the product type will be fetched separately
            document.getElementById("gambarProduk").value = ""; // Optional field
          }
        });

        // Event listener untuk menyimpan perubahan update produk
        document
          .getElementById("saveProdukButton")
          .addEventListener("click", async () => {
            const form = document.getElementById("updateProdukForm");
            const formData = new FormData(form);
            const data = Object.fromEntries(formData.entries());

            if (!selectedProductId) {
              alert("Please select a product to update.");
              return;
            }

            try {
              const response = await fetch(
                "http://localhost:3000/web/updateProduk",
                {
                  method: "PUT",
                  headers: {
                    "Content-Type": "application/json",
                  },
                  body: JSON.stringify({
                    ...data,
                    id_produk: selectedProductId,
                  }),
                }
              );

              if (!response.ok) {
                const error = await response.json();
                throw new Error(error.message);
              }

              const result = await response.json();
              console.log("Produk updated:", result);
              alert("Produk updated successfully");

              // Tutup modal
              const modalInstance = bootstrap.Modal.getInstance(
                document.getElementById("updateProdukModal")
              );
              modalInstance.hide();

              // Refresh data produk
              loadProduk();
            } catch (error) {
              console.log("Error updating produk:", error.message);
              alert("Failed to update produk");
            }
          });

        // Event delegation untuk tombol hapus produk
        document.addEventListener("click", async (event) => {
          const button = event.target.closest(".hapus-produk");
          if (button) {
            const productId = button.getAttribute("data-id");
            const confirmDelete = confirm(
              "Apakah Anda yakin ingin menghapus produk ini?"
            );
            if (confirmDelete) {
              try {
                const response = await fetch(
                  "http://localhost:3000/web/hapusProduk",
                  {
                    method: "DELETE",
                    headers: {
                      "Content-Type": "application/json",
                    },
                    body: JSON.stringify({ id_stockproduk: productId }),
                  }
                );

                if (!response.ok) {
                  const error = await response.json();
                  throw new Error(error.message);
                }

                const result = await response.json();
                console.log("Produk deleted:", result);
                alert("Produk deleted successfully");

                // Refresh data produk
                loadProduk();
              } catch (error) {
                console.log("Error deleting produk:", error.message);
                alert("Failed to delete produk");
              }
            }
          }
        });
      });

      // script reset password
      // Ambil elemen modal dan form
      const resetPasswordModal = document.getElementById("resetPassword");
      const resetPasswordForm = document.getElementById("resetPasswordForm");
      const saveNewPassButton = document.getElementById("saveNewPassButton");

      // Event listener untuk tombol simpan password baru
      saveNewPassButton.addEventListener("click", async () => {
        const passwordInput = document.getElementById("password");
        const newPassword = passwordInput.value;

        console.log("Password baru: ", newPassword); // Debugging
        console.log("ID Pengguna: ", selectedUserId); // Debugging

        if (!selectedUserId || !newPassword) {
          alert("Please select a user and enter a new password.");
          return;
        }

        try {
          const response = await fetch(
            "http://localhost:3000/web/resetPassword",
            {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({
                newPassword,
                id_user: selectedUserId,
              }),
            }
          );

          if (!response.ok) {
            const error = await response.json();
            throw new Error(error.message);
          }

          const result = await response.json();
          console.log("Password updated:", result);
          alert("Password updated successfully");

          // Tutup modal
          const modalInstance = bootstrap.Modal.getInstance(resetPasswordModal);
          modalInstance.hide();

          // Opsional: Refresh data pengguna jika perlu
          // loadUsers(); // Pastikan loadUsers adalah fungsi yang memuat ulang daftar pengguna
        } catch (error) {
          console.error("Error updating password:", error);
          alert("Failed to update password");
        }
      });

      // script untuk pembelian

      function produkPembelian() {
        // daftar stok produk untuk pembelian
        fetch("http://localhost:3000/web/allDataProduk", {
          method: "GET",
        })
          .then((response) => response.json())
          .then((data) => {
            console.log("produk: ", data);

            const daftarProduk = document.querySelector(
              ".card-produk-pembelian"
            );
            daftarProduk.innerHTML = ""; // clear existing cards

            // buat card untuk produk snack
            data.forEach((item) => {
              const harga = item.harga;
              const formattedHarga = `Rp${harga.toLocaleString("id-ID")}`;
              const card = document.createElement("div");
              card.className = "card col-3 m-2";
              card.innerHTML = `
              <div class="card-img d-flex justify-content-center align-items-center m-1">
                <img
                  src="/image/minyak-rambut.png"
                  class="card-img-top"
                  alt="${item.nama_produk}"
                />
              </div>
              <div class="card-body">
                <h6 class="card-title text-center fw-bold">${item.nama_produk}</h6>
                <p class="card-text text-center">${formattedHarga}</p>
                <p class="card-text text-center">Stok: ${item.stok}</p>
                <div class="d-flex justify-content-center">
                  <button type="button" class="btn btn-success m-1 add-to-cart" data-id="${item.id_produk}" data-nama="${item.nama_produk}" data-harga="${formattedHarga}">
                    <i class="bi bi-plus-lg"></i>
                  </button>
                </div>
              </div>
            `;

              daftarProduk.append(card);
            });

            // Event listener untuk tombol tambah ke keranjang
            document.querySelectorAll(".add-to-cart").forEach((button) => {
              button.addEventListener("click", (event) => {
                const button = event.currentTarget;
                const id = button.getAttribute("data-id");
                const nama = button.getAttribute("data-nama");
                const harga = button.getAttribute("data-harga");

                addToCart(id, nama, harga);
              });
            });
          });
      }

      produkPembelian();

      // Tambahkan card rekap di bawah semua item
      const container = document.querySelector(".container-item-pembelian");
      const recapCard = document.createElement("div");
      recapCard.className = "card mt-4";
      recapCard.innerHTML = `
        <div class="card-body">
          <h5 class="card-title">Rekap Total</h5>
          <p class="card-text">Total Item: <span id="total-items">0</span></p>
          <p class="card-text">Total Harga: <span id="total-price">Rp0</span></p>
          <button type="button" class="btn btn-success d-flex align-items-center d-none" id="checkout-btn" data-bs-toggle="modal"
                data-bs-target="#metodePembayaran" >
            <i class="bi bi-check-lg me-2"></i> Checkout
          </button>
        </div>
      `;
      container.append(recapCard);

      function addToCart(id, nama, harga) {
        // Periksa apakah produk sudah ada di keranjang
        let item = container.querySelector(`.item[data-id="${id}"]`);

        if (item) {
          // Update jumlah jika produk sudah ada
          const quantity = item.querySelector(".quantity");
          quantity.textContent = parseInt(quantity.textContent) + 1;
          updateTotalPrice(item);
        } else {
          // Buat elemen baru untuk produk
          const newItem = document.createElement("div");
          newItem.className = "row mt-2 item";
          newItem.setAttribute("data-id", id);
          newItem.setAttribute("data-harga", harga); // Simpan harga satuan
          newItem.innerHTML = `
            <div class="col-12">
              <div class="card">
                <div class="row g-0">
                  <div class="col-md-5">
                    <div class="card-body">
                      <p class="card-title" style="font-size: 1em">${nama}</p>
                      <p class="card-text" style="font-size: 0.8em">Harga: ${harga}</p>
                      <p class="card-text" style="font-size: 0.8em">Total: <span class="total-price">${harga}</span></p>
                    </div>
                  </div>
                  <div class="col-md-6 d-flex align-items-center justify-content-center">
                    <button class="btn btn-outline-secondary decrease">-</button>
                    <span class="mx-3 quantity">1</span>
                    <button class="btn btn-outline-secondary increase">+</button>
                    <button class="btn btn-danger btn-sm ms-3 remove">hapus</button>
                  </div>
                </div>
              </div>
            </div>
          `;

          container.append(newItem);

          // Tambahkan event listener untuk tombol decrease, increase, dan remove
          newItem.querySelector(".decrease").addEventListener("click", () => {
            const quantity = newItem.querySelector(".quantity");
            let qty = parseInt(quantity.textContent);
            if (qty > 1) {
              quantity.textContent = qty - 1;
              updateTotalPrice(newItem);
              updateRecap();
            }
          });

          newItem.querySelector(".increase").addEventListener("click", () => {
            const quantity = newItem.querySelector(".quantity");
            quantity.textContent = parseInt(quantity.textContent) + 1;
            updateTotalPrice(newItem);
            updateRecap();
          });

          newItem.querySelector(".remove").addEventListener("click", () => {
            newItem.remove();
            updateRecap(); // Update recap setelah item dihapus
          });
        }

        updateRecap(); // Update recap setelah item ditambahkan
      }

      function updateTotalPrice(item) {
        const quantity = item.querySelector(".quantity").textContent;
        const harga = parseInt(
          item.getAttribute("data-harga").replace(/[^\d]/g, "")
        );
        const totalPrice = quantity * harga;
        item.querySelector(
          ".total-price"
        ).textContent = `Rp${totalPrice.toLocaleString("id-ID")}`;
      }

      function updateRecap() {
        const items = container.querySelectorAll(".item");
        let totalItems = 0;
        let totalPrice = 0;

        items.forEach((item) => {
          const quantity = parseInt(
            item.querySelector(".quantity").textContent
          );
          const harga = parseInt(
            item.getAttribute("data-harga").replace(/[^\d]/g, "")
          );
          totalItems += quantity;
          totalPrice += quantity * harga;
        });

        document.getElementById("total-items").textContent = totalItems;
        document.getElementById(
          "total-price"
        ).textContent = `Rp${totalPrice.toLocaleString("id-ID")}`;

        const checkoutBtn = document.getElementById("checkout-btn");

        // Tampilkan tombol checkout jika ada item di keranjang, sembunyikan jika tidak ada
        if (totalItems > 0) {
          checkoutBtn.classList.remove("d-none");
        } else {
          checkoutBtn.classList.add("d-none");
        }
      }

      document
        .getElementById("finishTransaction")
        .addEventListener("click", () => {
          const metode_pembayaran =
            document.getElementById("metode_pembayaran").value;
          const no_telp = document.getElementById("no_telp").value;

          if (!metode_pembayaran || !no_telp) {
            alert("Silakan isi semua field sebelum melanjutkan.");
            return;
          }

          const items = [];
          document.querySelectorAll(".item").forEach((item) => {
            const id_produk = item.getAttribute("data-id");
            const kuantitas = item.querySelector(".quantity").textContent;

            items.push({
              id_produk: parseInt(id_produk),
              kuantitas: parseInt(kuantitas),
            });
          });

          // const checkoutData = {
          //   metode_pembayaran: metode_pembayaran,
          //   no_telp: no_telp, // Now using the phone number instead of user ID
          //   items: items,
          // };

          // fetch("http://localhost:3000/web/checkout", {
          //   method: "POST",
          //   headers: {
          //     "Content-Type": "application/json",
          //   },
          //   body: JSON.stringify(checkoutData),
          // })
          //   .then((response) => response.json())
          //   .then((data) => {
          //     console.log("Transaksi berhasil:", data);

          //     // Handle the successful response here
          //     alert("Transaksi Berhasil");

          //     // Menutup modal setelah sukses
          //     const modalElement = document.getElementById("metodePembayaran");
          //     const modalInstance = bootstrap.Modal.getInstance(modalElement);
          //     modalInstance.hide();

          //     // Initial load
          //     produkPembelian();

          //     // Clear only the items in the "item pembelian" container
          //     document
          //       .querySelectorAll(".item")
          //       .forEach((item) => item.remove());

          //     // Optionally, reset the total items and total price display
          //     document.getElementById("total-items").textContent = "0";
          //     document.getElementById("total-price").textContent = "Rp0";

          //     // Hide the checkout button
          //     document.getElementById("checkout-btn").classList.add("d-none");

          //     // Hide the checkout button
          //     document.getElementById("checkout-btn").classList.add("d-none");
          //   })
          //   .catch((error) => {
          //     console.error(error);
          //   });

          const checkoutData = {
            metode_pembayaran: metode_pembayaran,
            no_telp: no_telp, // Now using the phone number instead of user ID
            items: items,
          };

          fetch("http://localhost:3000/web/checkout", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify(checkoutData),
          })
            .then((response) => {
              // Cek jika statusnya 400 (bad request)
              if (response.status === 400) {
                return response.json().then((data) => {
                  // Cek jika errornya karena poin tidak cukup
                  if (data.error === "Point tidak cukup") {
                    throw new Error(
                      "Poin yang Anda miliki tidak cukup untuk melakukan pembayaran"
                    );
                  }
                  // Lemparkan error lain jika ada
                  throw new Error(
                    data.error || "Terjadi kesalahan saat melakukan transaksi"
                  );
                });
              }

              // Jika respons sukses, return JSON-nya
              return response.json();
            })
            .then((data) => {
              console.log("Transaksi berhasil:", data);

              // Tampilkan alert transaksi berhasil
              alert("Transaksi Berhasil");

              // Menutup modal setelah sukses
              const modalElement = document.getElementById("metodePembayaran");
              const modalInstance = bootstrap.Modal.getInstance(modalElement);
              modalInstance.hide();

              // Initial load
              produkPembelian();

              // Hapus hanya item di container "item pembelian"
              document
                .querySelectorAll(".item")
                .forEach((item) => item.remove());

              // Reset tampilan total items dan total price
              document.getElementById("total-items").textContent = "0";
              document.getElementById("total-price").textContent = "Rp0";

              // Sembunyikan tombol checkout
              document.getElementById("checkout-btn").classList.add("d-none");
            })
            .catch((error) => {
              // Menampilkan alert dengan pesan error yang sesuai
              alert(error.message);
              console.error("Terjadi kesalahan:", error);
            });
        });
    </script>
  </body>
</html>
